# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET     /login/:name/redirect       @controllers.AuthController.login(name)
GET     /login/:name/merge          @controllers.AuthController.merge(name)
GET     /login/renew                @controllers.AuthController.renew
POST    /logout                     @controllers.AuthController.logout
GET     /login/:name/callback       @controllers.AuthController.namedCallback(name)
POST    /login/:name/callback       @controllers.AuthController.namedCallback(name)

POST    /auth/callback              @controllers.AuthController.unnamedCallback
GET     /public-keys                @controllers.AuthController.publicKeys

GET     /users/current              @controllers.UserController.currentUser
GET     /users/merge                @controllers.UserController.mergeUser
GET     /users/:id                  @controllers.UserController.get(id)

# Map static resources from the /public folder to the /assets URL path
GET     /favicon.ico                controllers.Assets.at(path="/public", file="images/favicon.ico")
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)

# Home page
GET     /                           @controllers.Application.main(path="")
GET     /login                      @controllers.Application.main(path="login")
GET     /account                    @controllers.Application.main(path="account")
GET     /waiting/:scheme/:host/     @controllers.Application.waiting(scheme,host,uri="")
GET     /waiting/:scheme/:host/*uri @controllers.Application.waiting(scheme,host,uri)
HEAD    /health                     @controllers.Application.health(isHeadRequest: Boolean = true)
GET     /health                     @controllers.Application.health(isHeadRequest: Boolean = false)

# Account merge
GET     /account/merge              @controllers.Application.main(path="account/merge")
POST    /account/merge              @controllers.AuthController.confirmMerge
DELETE  /account/merge              @controllers.AuthController.cancelMerge

# Compute Nodes
GET     /compute-nodes              @controllers.ComputeNodeController.index
POST    /compute-nodes              @controllers.ComputeNodeController.create
PUT     /compute-nodes/:id          @controllers.ComputeNodeController.update(id)
DELETE  /compute-nodes/:id          @controllers.ComputeNodeController.delete(id)
# Compute Nodes - images
POST    /compute-nodes/:nodeId/images               @controllers.ComputeNodeController.createImage(nodeId)
GET     /compute-nodes/:nodeId/images               @controllers.ComputeNodeController.listImages(nodeId)
DELETE  /compute-nodes/:nodeId/images/:imageId      @controllers.ComputeNodeController.removeImage(nodeId, imageId)
POST    /compute-nodes/:nodeId/images/:imageId/pull @controllers.ComputeNodeController.pullImage(nodeId, imageId)
# Compute Nodes - containers
GET     /compute-nodes/:nodeId/containers                   @controllers.ComputeNodeController.listContainers(nodeId)
DELETE  /compute-nodes/:nodeId/containers/:containerId      @controllers.ComputeNodeController.deleteContainer(nodeId, containerId)
POST    /compute-nodes/:nodeId/containers/:containerId/stop @controllers.ComputeNodeController.stopContainer(nodeId, containerId)
# Compute Nodes - tokens
POST    /compute-nodes/:id/redeem-token @controllers.ComputeNodeController.redeemToken(id, code)
POST    /compute-nodes/:id/tokens       @controllers.ComputeNodeController.createToken(id)
GET     /compute-nodes/:id/tokens       @controllers.ComputeNodeController.listTokens(id)
DELETE  /compute-nodes/:id/tokens/:code @controllers.ComputeNodeController.deleteToken(id, code)
# Compute Nodes - owners
GET     /compute-nodes/:nodeId/owners           @controllers.ComputeNodeController.listOwners(nodeId)
DELETE  /compute-nodes/:nodeId/owners/:userId   @controllers.ComputeNodeController.removeOwner(nodeId, userId)
# Compute Nodes - users
GET     /compute-nodes/:nodeId/users            @controllers.ComputeNodeController.listUsers(nodeId)
DELETE  /compute-nodes/:nodeId/users/:userId    @controllers.ComputeNodeController.removeUser(nodeId, userId)

# Containers
GET     /containers                 @controllers.ContainerController.index
POST    /containers                 @controllers.ContainerController.create
GET     /containers/:id             @controllers.ContainerController.get(id)
PUT     /containers/:id             @controllers.ContainerController.update(id)
DELETE  /containers/:id             @controllers.ContainerController.delete(id)
GET     /containers/:id/export      @controllers.ContainerController.export(id)
GET     /containers/:id/redirect    @controllers.ContainerController.redirect(id)
